---
type Props = {
  id?: string;
  class?: string;
};

const { id, class: className }: Props = Astro.props;
const { pathname } = Astro.url;
const routes = [];
const instances = await Astro.glob("src/pages/**/*.astro");
for (const { url: routePath } of instances) {
  const fileDepth = routePath?.match(/\/./g)?.length ?? 0;
  const routeDepth = pathname.match(/\/./g)?.length ?? 0;
  if (
    !routePath?.match(/(\/404)|(\/\_.*$)/) &&
    routePath?.startsWith(pathname) &&
    fileDepth - routeDepth === 1
  ) {
    const title = routePath?.match(/([^\/]*)$/)?.[0].replaceAll(/[^\w]/g, " ");
    routes.push({ title: title, url: routePath });
  }
}
---

<section id={id} class={className ?? "routes"}>
  <ol class="list-inside">
    {
      routes.map((route) => (
        <li>
          <a href={route.url} class="first-letter:capitalize">
            {route.title}
          </a>
        </li>
      ))
    }
  </ol>
</section>
